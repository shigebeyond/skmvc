	/**
	 * @param mixed $value
	 * @param int   $preservedStrLength
	 *
	 * @return int|string
	 */
	protected function _parseBindValue($value, $preservedStrLength)
	{
		if (is_string($value)) {
			if ($preservedStrLength > 0 && strlen($value) >= $preservedStrLength) {
				return $this->_pdo->quote(substr($value, 0, $preservedStrLength) . '...');
			} else {
				return $this->_pdo->quote($value);
			}
		} elseif (is_int($value)) {
			return $value;
		} elseif ($value === null) {
			return 'NULL';
		} elseif (is_bool($value)) {
			return (int)$value;
		} else {
			return $value;
		}
	}


	/**
	 * Active SQL statement in the object with replace the bind with value
	 *
	 * @param int $preservedStrLength
	 *
	 * @return string
	 */
	public function getEmulatedSQL($preservedStrLength = -1)
	{
		if (count($this->_bind) === 0) {
			return (string)$this->_sql;
		}

		$bind = $this->_bind;
		if (isset($bind[0])) {
			return (string)$this->_sql;
		} else {
			$replaces = [];
			foreach ($bind as $key => $value) {
				$replaces[':' . $key] = $this->_parseBindValue($value, $preservedStrLength);
			}

			return (string)strtr($this->_sql, $replaces);
		}
	}