 
    /**
     * Inserts data into a table using custom SQL syntax
     * <code>
     * //Inserting a new robot
     * $row_count = $db->insert(
     *     "robots",
     *     array("Boy", 1952),
     *     array("name", "year")
     * );
     * //Next SQL sentence is sent to the database system
     * INSERT INTO `robots` (`name`, `year`) VALUES ("boy", 1952);
     * </code>
     *
     * @param    string $table
     * @param    array  $columnValues
     *
     * @return void
     * @throws \ManaPHP\Db\Exception
     */
    public function insert($table, $columnValues)
    {
        if (count($columnValues) === 0) {
            throw new DbException('Unable to insert into :table table without data'/**m07945f8783104be33*/, ['table' => $table]);
        }
    
        $escapedTable = $this->escapeIdentifier($table);
        if (array_key_exists(0, $columnValues)) {
            $insertedValues = rtrim(str_repeat('?,', count($columnValues)), ',');
    
            $sql = /** @lang Text */
            "INSERT INTO $escapedTable VALUES ($insertedValues)";
        } else {
            $columns = array_keys($columnValues);
            $insertedValues = ':' . implode(',:', $columns);
            $insertedColumns = '`' . implode('`,`', $columns) . '`';
    
            $sql = /** @lang Text */
            "INSERT INTO $escapedTable ($insertedColumns) VALUES ($insertedValues)";
        }
    
        $this->execute($sql, $columnValues);
    }
    
    
    private function getSQLForSelect()
    {
        $query = 'SELECT ' . implode(', ', $this->sqlParts['select']) . ' FROM ';
    
        $fromClauses = array();
        $joinsPending = true;
        $joinAliases = array();
    
        // Loop through all FROM clauses
        foreach ($this->sqlParts['from'] as $from) {
            $fromClause = $from['table'] . ' ' . $from['alias'];
    
            if ($joinsPending && isset($this->sqlParts['join'][$from['alias']])) {
                foreach ($this->sqlParts['join'] as $joins) {
                    foreach ($joins as $join) {
                        $fromClause .= ' ' . strtoupper($join['joinType'])
                        . ' JOIN ' . $join['joinTable'] . ' ' . $join['joinAlias']
                        . ' ON ' . ((string) $join['joinCondition']);
                        $joinAliases[$join['joinAlias']] = true;
                    }
                }
                $joinsPending = false;
            }
    
            $fromClauses[$from['alias']] = $fromClause;
        }
    
        // loop through all JOIN clauses for validation purpose
        $knownAliases = array_merge($fromClauses,$joinAliases);
        foreach ($this->sqlParts['join'] as $fromAlias => $joins) {
            if ( ! isset($knownAliases[$fromAlias]) ) {
                throw QueryException::unknownAlias($fromAlias, array_keys($knownAliases));
            }
        }
    
    
        $query .= implode(', ', $fromClauses)
        . ($this->sqlParts['where'] !== null ? ' WHERE ' . ((string) $this->sqlParts['where']) : '')
        . ($this->sqlParts['groupBy'] ? ' GROUP BY ' . implode(', ', $this->sqlParts['groupBy']) : '')
        . ($this->sqlParts['having'] !== null ? ' HAVING ' . ((string) $this->sqlParts['having']) : '')
        . ($this->sqlParts['orderBy'] ? ' ORDER BY ' . implode(', ', $this->sqlParts['orderBy']) : '');
    
        return ($this->maxResults === null && $this->firstResult == null)
        ? $query
        : $this->connection->getDatabasePlatform()->modifyLimitQuery($query, $this->maxResults, $this->firstResult);
    }
    
    /**
     * Converts this instance into an UPDATE string in SQL.
     *
     * @return string
     */
    private function getSQLForUpdate()
    {
        $table = $this->sqlParts['from']['table'] . ($this->sqlParts['from']['alias'] ? ' ' . $this->sqlParts['from']['alias'] : '');
        $query = 'UPDATE ' . $table
        . ' SET ' . implode(", ", $this->sqlParts['set'])
        . ($this->sqlParts['where'] !== null ? ' WHERE ' . ((string) $this->sqlParts['where']) : '');
    
        return $query;
    }

    
    /**
     * Updates data on a table using custom SQL syntax
     * <code>
     * //Updating existing robot
     * $row_count = $db->update(
     *     "robots",
     *     array("name"),
     *     array("New Boy"),
     *     "id = 101"
     * );
     * //Next SQL sentence is sent to the database system
     * UPDATE `robots` SET `name` = "boy" WHERE id = 101
     * </code>
     *
     * @param    string       $table
     * @param    array        $columnValues
     * @param    string|array $conditions
     * @param    array        $params
     *
     * @return    int
     * @throws \ManaPHP\Db\Exception
     */
    public function update($table, $columnValues, $conditions, $params = [])
    {
        $escapedTable = "`$table`";
    
        if (count($columnValues) === 0) {
            throw new DbException('Unable to update :table table without data'/**m07b005f0072d05d71*/, ['table' => $table]);
        }
    
        if (is_string($conditions)) {
            $conditions = [$conditions];
        }
    
        $wheres = [];
    
        /** @noinspection ForeachSourceInspection */
        foreach ($conditions as $k => $v) {
            if (is_int($k)) {
                $wheres[] = Text::contains($v, ' or ', true) ? "($v)" : $v;
            } else {
                $wheres[] = "`$k`=:$k";
                $params[$k] = $v;
            }
        }
    
        $setColumns = [];
        foreach ($columnValues as $k => $v) {
            if (is_int($k)) {
                $setColumns[] = $v;
            } else {
                $setColumns[] = "`$k`=:$k";
                $params[$k] = $v;
            }
        }
    
        $updateColumns = implode(',', $setColumns);
        $updateSql = /** @lang Text */
        "UPDATE $escapedTable SET $updateColumns WHERE " . implode(' AND ', $wheres);
    
        return $this->execute($updateSql, $params);
    }
    
}