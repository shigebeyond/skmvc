/**
	 * Inserts data into a table using custom SQL syntax
	 * <code>
	 * //Inserting a new robot
	 * $row_count = $connection->insert(
	 *     "robots",
	 *     array("Boy", 1952),
	 *     array("name", "year")
	 * );
	 * //Next SQL sentence is sent to the database system
	 * INSERT INTO `robots` (`name`, `year`) VALUES ("boy", 1952);
	 * </code>
	 *
	 * @param    string $table
	 * @param    array  $columnValues
	 *
	 * @return void
	 * @throws \ManaPHP\Db\Exception
	 */
	public function insert($table, $columnValues)
	{
		if (count($columnValues) === 0) {
			throw new DbException('Unable to insert into :table table without data'/**m07945f8783104be33*/, ['table' => $table]);
		}

		$escapedTable = $this->escapeIdentifier($table);
		if (array_key_exists(0, $columnValues)) {
			$insertedValues = rtrim(str_repeat('?,', count($columnValues)), ',');

			$sql = /** @lang Text */
			"INSERT INTO $escapedTable VALUES ($insertedValues)";
		} else {
			$columns = array_keys($columnValues);
			$insertedValues = ':' . implode(',:', $columns);
			$insertedColumns = '`' . implode('`,`', $columns) . '`';

			$sql = /** @lang Text */
			"INSERT INTO $escapedTable ($insertedColumns) VALUES ($insertedValues)";
		}

		$this->execute($sql, $columnValues);
	}

	/**
	 * Updates data on a table using custom SQL syntax
	 * <code>
	 * //Updating existing robot
	 * $row_count = $connection->update(
	 *     "robots",
	 *     array("name"),
	 *     array("New Boy"),
	 *     "id = 101"
	 * );
	 * //Next SQL sentence is sent to the database system
	 * UPDATE `robots` SET `name` = "boy" WHERE id = 101
	 * </code>
	 *
	 * @param    string       $table
	 * @param    array        $columnValues
	 * @param    string|array $conditions
	 * @param    array        $params
	 *
	 * @return    int
	 * @throws \ManaPHP\Db\Exception
	 */
	public function update($table, $columnValues, $conditions, $params = [])
	{
		$escapedTable = "`$table`";

		if (count($columnValues) === 0) {
			throw new DbException('Unable to update :table table without data'/**m07b005f0072d05d71*/, ['table' => $table]);
		}

		if (is_string($conditions)) {
			$conditions = [$conditions];
		}

		$wheres = [];

		/** @noinspection ForeachSourceInspection */
		foreach ($conditions as $k => $v) {
			if (is_int($k)) {
				$wheres[] = Text::contains($v, ' or ', true) ? "($v)" : $v;
			} else {
				$wheres[] = "`$k`=:$k";
				$params[$k] = $v;
			}
		}

		$setColumns = [];
		foreach ($columnValues as $k => $v) {
			if (is_int($k)) {
				$setColumns[] = $v;
			} else {
				$setColumns[] = "`$k`=:$k";
				$params[$k] = $v;
			}
		}

		$updateColumns = implode(',', $setColumns);
		$updateSql = /** @lang Text */
		"UPDATE $escapedTable SET $updateColumns WHERE " . implode(' AND ', $wheres);

		return $this->execute($updateSql, $params);
	}

	/**
	 * Deletes data from a table using custom SQL syntax
	 * <code>
	 * //Deleting existing robot
	 * $row_count = $connection->delete(
	 *     "robots",
	 *     "id = 101"
	 * );
	 * //Next SQL sentence is generated
	 * DELETE FROM `robots` WHERE `id` = 101
	 * </code>
	 *
	 * @param  string       $table
	 * @param  string|array $conditions
	 * @param  array        $params
	 *
	 * @return int
	 * @throws \ManaPHP\Db\Exception
	 */
	public function delete($table, $conditions, $params = [])
	{
		if (is_string($conditions)) {
			$conditions = [$conditions];
		}

		$wheres = [];
		/** @noinspection ForeachSourceInspection */
		foreach ($conditions as $k => $v) {
			if (is_int($k)) {
				$wheres[] = Text::contains($v, ' or ', true) ? "($v)" : $v;
			} else {
				$wheres[] = "`$k`=:$k";
				$params[$k] = $v;
			}
		}

		$sql = /**@lang Text */
		"DELETE FROM `$table` WHERE " . implode(' AND ', $wheres);

		return $this->execute($sql, $params);
	}

	/**
	 * Appends a LIMIT clause to $sqlQuery argument
	 * <code>
	 *    echo $connection->limit("SELECT * FROM robots", 5);
	 * </code>
	 *
	 * @param    string $sql
	 * @param    int    $number
	 * @param   int     $offset
	 *
	 * @return    string
	 */
	public function limit($sql, $number, $offset = 0)
	{
		return $sql . ' LIMIT ' . $number . ($offset === 0 ? '' : (' OFFSET ' . $offset));
	}
	